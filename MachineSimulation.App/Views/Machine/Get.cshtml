@model MachineDetailsDto

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/get.css" asp-append-version="true" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="mt-3">
        <div class="">
            <h3>@Model.MachineName</h3>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="card-div graph-card-blue mt-4 align-top">
                    <div class="machine-state-card ">
                        <h4 class="machine-state-card-title">
                            Makine Durumu
                        </h4>
                    </div>
                    <div id="machine-state-container" class="machine-state">
                        <img src="~/images/machines/@Model.ImageUrl" />
                        <!-- Lamba -->
                        <div class="container">
                            <div class="light-up">
                                <div class="light red" id="red-light"></div>
                                <div class="light yellow" id="yellow-light"></div>
                                <div class="light green" id="green-light"></div>
                            </div>
                            <div class="light-down">
                                <div class="down" id="down"></div>
                            </div>
                            <div class="light-base">
                                <div class="base" id="base"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="graph-card-pink kalite-card-div h-100 scrollable-quality-datas">
                    <div class="kalite-card">
                        <h4 class="kalite-card-title">
                            Kalite Kriter Verisi
                        </h4>
                    </div>
                    <hr class="line-for-cart" />
                    <div class="row">
                        @foreach (var parameter in Model.Parameters)
                        {
                            <div class="col-md-6 mb-2">
                                <div class="card white-border-card" style="text-align:center;align-content:center">
                                    <div class="card-header" title="@parameter.ParameterName">
                                        <h6>@parameter.ParameterName</h6>
                                    </div>
                                    <div class="card-body">
                                        <h4 class="card-title" data-parameter-name="@parameter.ParameterName" data-parameter-value="@parameter.ParameterValue">0</h4>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="log-card-div graph-card-green graph-card-log" onclick="openModal('greenModal')">
                    <h4 class="log-card-title">Log Kayıtları</h4>
                </div>
                <div class="log-card-div graph-card-purple" onclick="openModal('purpleModal')">
                    <h4 class="log-card-title">Parametre Grafikleri</h4>
                </div>
            </div>
            <!-- İkinci içerik alanı -->
            <div class="col-md-6">
                <div class="uretim-card-div graph-card-orange mt-4 align-top scrollable-logs">
                    <div class="uretim-card">
                        <h4 class="uretim-card-title">
                            Üretim-Duruş Durumu
                        </h4>
                    </div>
                    <div class="custom-hr"><p></p></div>
                    <h5 class="ikinci-baslik">Manuel Üretim</h5>
                    <!-- Manuel Üretim bölümü -->
                    <div class="uretim-bolumu">
                        <div class="buton-grubu">
                            <button id="uretimBaslat" class="btn btn-green">Üretim Başlat</button>
                            <button id="uretimiDurdur" class="btn btn-red">Üretimi Durdur</button>
                        </div>
                        <div class="veri-gruplari">
                            <h6 class="ucuncu-baslik-notmargin">Anlık Süre (Saniye):</h6>
                            <div class="sure-label-grubu custom-sure-label">
                                <span id="uretimSuresiLabel" class="süre-label"><span id="uretimSuresi">0</span></span>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <h5 class="ikinci-baslik">Otomatik Üretim</h5>
                    <!-- Otomatik Üretim bölümü -->
                    <div class="uretim-bolumu">
                        <div class="buton-grubu">
                            <button id="otomatikUretimBaslat" class="btn btn-green">Üretim Başlat</button>
                            <button id="otomatikUretimiDurdur" class="btn btn-red" disabled>Üretimi Durdur</button>
                        </div>
                        <div class="veri-gruplari">
                            <div class="veri-grubu-giris">
                                <h6 class="ucuncu-baslik">Üretim Süresi Giriniz:</h6>
                                <div class="input-grubu">
                                    <input type="number" id="otomatikVeriGirisi" class="input-number" min="1" step="1">
                                </div>
                            </div>
                            <h6 class="ucuncu-baslik-notmargin">Atanan Süre (Saniye):</h6>
                            <div class="sure-label-grubu">
                                <span id="otomatikUretimSuresiLabel" class="süre-label"><span id="otomatikUretimSuresi">0</span></span>
                            </div>
                        </div>
                    </div>
                    <div class="custom-hr"><p></p></div>
                    <h5 class="ikinci-baslik">Hazırlık Duruş Durumu</h5>
                    <!-- Hazırlık Duruş Durumu Bölümü -->
                    <div class="hazirlik-bolumu">
                        <div class="buton-grubu">
                            <button id="hazirlikBaslat" class="btn btn-green">Hazırlık Başlat</button>
                            <button id="hazirlikBitir" class="btn btn-red">Hazırlık Bitir</button>
                        </div>
                        <div class="veri-gruplari">
                            <h6 class="ucuncu-baslik-notmargin">Anlık Süre (Saniye):</h6>
                            <div class="sure-label-grubu custom-sure-label">
                                <span id="hazirlikSuresiLabel" class="süre-label"><span id="sure">0</span></span>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <h5 class="ikinci-baslik">Belirli Duruş Durumu</h5>
                    <!-- Belirli Duruş Durumu bölümü -->
                    <div class="hazirlik-bolumu">
                        <div class="buton-grubu">
                            <button id="durusBaslat" class="btn btn-green" disabled>Duruş Başlat</button>
                            <button id="durusBitir" class="btn btn-red" disabled>Duruşu Bitir</button>
                        </div>
                        <div class="veri-gruplari">
                            <div class="veri-grubu-giris">
                                <h6 class="ucuncu-baslik">Duruş Sebebi Seçiniz:</h6>
                                <div class="input-grubu">
                                    <select id="stoppageReasonSelect" class="form-select input-number-durus">
                                        <option value="">Seçiniz...</option>
                                        @foreach (var stoppage in Model.Stopages)
                                        {
                                            <option value="@stoppage.ReasonStoppageValue">@stoppage.ReasonStoppageName</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="veri-gruplari">
                                <h6 class="ucuncu-baslik-notmargin">Atanan Süre (Saniye):</h6>
                                <div class="sure-label-grubu">
                                    <span id="durusSuresiLabel" class="süre-label"><span id="durusSuresi">0</span></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="custom-hr"><p></p></div>
                    <!-- Toplam süre -->
                    <div class="log-card-div toplam-sure-design" onclick="openModal('sureRaporModel')">
                        <h5 class="log-card-title">Süre Raporu</h5>
                    </div>
                </div>
                <!-- Modals -->
                <div id="greenModal" class="modal">
                    <div class="modal-content">
                        <span class="close">&times;</span>
                        <h2>Log Kayıtları</h2>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Eylem</th>
                                    <th>Zaman Damgası</th>
                                </tr>
                            </thead>
                            <tbody id="logTableBody">
                                <!-- JavaScript ile dinamik olarak log kayıtları buraya eklenecek -->
                            </tbody>
                        </table>
                    </div>
                </div>
                <div id="purpleModal" class="modal">
                    <div class="modal-content">
                        <span class="close">&times;</span>
                        <h2>Parametre Grafikleri</h2>
                        <div id="graphs-container" class="graphs-property">
                            <!-- JavaScript ile dinamik olarak grafik kartları buraya eklenecek -->
                        </div>
                    </div>
                </div>
                <!-- Toplam Süre Modal -->
                <div id="sureRaporModel" class="modal">
                    <div class="modal-content">
                        <span class="close">&times;</span>
                        <h2>Süre Raporu</h2>
                        <div class="d-flex flex-column align-items-center">
                            <table class="table">
                                <tbody>
                                    <tr>
                                        <th>Toplam Üretim Süresi :</th>
                                        <td id="toplamUretimSuresi">0</td>
                                    </tr>
                                    <tr>
                                        <th>Toplam Duruş Süresi :</th>
                                        <td id="toplamDurusSuresi">0</td>
                                    </tr>
                                </tbody>
                            </table>
                            <hr />
                            <h3>Manuel Üretim</h3>
                            <hr />
                            <table class="table text-center">
                                <thead>
                                    <tr>
                                        <th scope="col">Tarih</th>
                                        <th scope="col">Manuel Üretim Listesi</th>
                                        <th scope="col">Manuel Üretim Adeti</th>
                                        <th scope="col">Toplam Manuel Üretim Süresi</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td class="currentDate">00.00.0000</td>
                                        <td id="uretimSuresiListesi">0</td>
                                        <td id="manuelUretimAdedi">0</td>
                                        <td id="manuelToplamSure">0</td>
                                    </tr>
                                </tbody>
                            </table>
                            <hr />
                            <h3>Otomatik Üretim</h3>
                            <hr />
                            <table class="table text-center">
                                <thead>
                                    <tr>
                                        <th scope="col">Tarih</th>
                                        <th scope="col">Otomatik Üretim Listesi</th>
                                        <th scope="col">Otomatik Üretim Adeti</th>
                                        <th scope="col">Toplam Otomatik Üretim Süresi</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td class="currentDate">00.00.0000</td>
                                        <td id="otomatikUretimSuresiListesi">0</td>
                                        <td id="uretimSayisi">0</td>
                                        <td id="otoUretimSuresi">0</td>
                                    </tr>
                                </tbody>
                            </table>
                            <hr />
                            <h3>Duruş Durumları</h3>
                            <hr />
                            <table id="durusDurumlari" class="table text-center">
                                <thead>
                                    <tr>
                                        <th scope="col">Tarih</th>
                                        <th scope="col">Duruş Türü</th>
                                        <th scope="col">Beklenen Süre</th>
                                        <th scope="col">Gerçekleşen Süre</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Dinamik olarak doldurulacak -->
                                    <tr>
                                        <td class="currentDate">00.00.0000</td>
                                        <td>Hazırlık Duruşu</td>
                                        <td>---</td>
                                        <td id="hazirlikDurusSüresi">0</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.7.12/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
   

    <script>
        document.getElementById('otomatikVeriGirisi').addEventListener('input', function () {
            var value = this.value;
            if (value < 1) {
                this.value = ''; 
            }
        });

        // JavaScript ile tarih bilgisini alıp biçimlendirme
        var today = new Date();
        var day = today.getDate().toString().padStart(2, '0'); // Gün için '0' ekler
        var month = (today.getMonth() + 1).toString().padStart(2, '0'); // Ay için '0' ekler
        var year = today.getFullYear();

        // Formatı DD.MM.YYYY olarak ayarlama
        var date = day + '.' + month + '.' + year;

        // Tarih bilgisini HTML'deki belirli bir elemana yazma
        // 'getElementsByClassName' ile tüm elemanları seçip döngü ile her birine tarih bilgisini yazma
        var elements = document.getElementsByClassName("currentDate");
        for (var i = 0; i < elements.length; i++) {
            elements[i].innerHTML = date;
        }


        // Değerleri güncelleyen bir fonksiyon tanımlayalım
        function updateToplamUretimSuresi() {
            var otoUretimSuresi = parseInt($('#otoUretimSuresi').text()) || 0;
            var manuelToplamSure = parseInt($('#manuelToplamSure').text()) || 0;
            var toplamUretimSuresi = otoUretimSuresi + manuelToplamSure;

            $('#toplamUretimSuresi').text(toplamUretimSuresi + " saniye");
        }

        // MutationObserver oluşturma fonksiyonu
        function createObserver(targetNode) {
            var observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    if (mutation.type === 'childList') {
                        updateToplamUretimSuresi();
                    }
                });
            });

            var config = { childList: true };
            observer.observe(targetNode, config);
        }

        // Başlangıçta toplam üretim süresini güncellemek
        updateToplamUretimSuresi();

        // otoUretimSuresi ve manuelToplamSure için gözlemcileri başlat
        createObserver(document.getElementById('otoUretimSuresi'));
        createObserver(document.getElementById('manuelToplamSure'));

        // Değerleri değiştirmek için yardımcı fonksiyonlar
        function setOtoUretimSuresi(value) {
            $('#otoUretimSuresi').text(value);
        }

        function setManuelToplamSure(value) {
            $('#manuelToplamSure').text(value);
        }

    </script>

    @* For Models *@
    <script>
        function openModal(modalId) {
            var modal = document.getElementById(modalId);
            modal.style.display = "block";

            var span = modal.getElementsByClassName("close")[0];
            span.onclick = function () {
                modal.style.display = "none";
            }
        }

        // Kullanıcı pencere dışına tıkladığında pencereyi kapat
        window.onclick = function (event) {
            var modals = document.getElementsByClassName('modal');
            for (var i = 0; i < modals.length; i++) {
                if (event.target == modals[i]) {
                    modals[i].style.display = "none";
                }
            }
        }


        $(document).ready(function () {
            // Üretim başlatma ve Otomatik Üretim başlatma butonları için olay dinleyiciler
            $('#uretimBaslat').click(function () {
                turnOnGreenLight();  // Yeşil ışığı aç
            });

            $('#otomatikUretimBaslat').click(function () {
                var inputValue = $('#otomatikVeriGirisi').val(); // İnput alanından değeri al
                if (inputValue) {
                    turnOnGreenLight();  // Eğer input değeri varsa yeşil ışığı aç
                } else {
                    alert("Lütfen gerekli veriyi giriniz.");  // Değer yoksa uyarı mesajı göster
                }
            });

            // Üretim durdurma, Otomatik Üretim durdurma ve Hazırlık Bitir butonları için olay dinleyiciler
            $('#uretimiDurdur, #otomatikUretimiDurdur, #hazirlikBitir').click(function () {
                clearLights();  
            });

            $('#hazirlikBaslat').click(function () {
                turnOnYellowLight();  
            });

            // Duruş bitirme butonu için olay dinleyici
            $('#durusBitir').click(function () {
                turnOnGreenLight();  
            });
        });




        $(document).ready(function () {
            // Başlangıçta Duruş Başlat ve Duruş Bitir butonlarını devre dışı bırak
            $('#durusBaslat, #durusBitir').prop('disabled', true);

            $('#uretimBaslat').click(function () {
                // Otomatik Üretim kontrollerini devre dışı bırak
                $('#otomatikUretimBaslat, #otomatikVeriGirisi').prop('disabled', true);
                // Duruş butonlarını etkinleştir
                $('#durusBaslat, #durusBitir').prop('disabled', false);
            });

            $('#uretimiDurdur').click(function () {
                // Otomatik Üretim kontrollerini tekrar etkinleştir
                $('#otomatikUretimBaslat, #otomatikVeriGirisi').prop('disabled', false);
                // Duruş butonlarını devre dışı bırak
                $('#durusBaslat, #durusBitir').prop('disabled', true);
            });

            $('#otomatikUretimBaslat').click(function () {
                // Manuel Üretim kontrollerini devre dışı bırak
                $('#uretimBaslat').prop('disabled', true);
                // Duruş butonlarını etkinleştir
                $('#durusBaslat, #durusBitir').prop('disabled', false);
            });

            $('#otomatikUretimiDurdur').click(function () {
                // Manuel Üretim kontrollerini tekrar etkinleştir
                $('#uretimBaslat').prop('disabled', false);
                // Duruş butonlarını devre dışı bırak
                $('#durusBaslat, #durusBitir').prop('disabled', true);
            });
        });





    </script>

    <script>
        let turnOnYellowLight;
        let turnOnGreenLight;
        let turnOnRedLight;

        let clearLights;

        let flashingYellowInterval; // Sarı ışığın yanıp sönme interval'ını saklamak için bir değişken
        let flashingGreenInterval;
        let flashingRedInterval;

        document.addEventListener('DOMContentLoaded', function () {
            const redLight = document.getElementById('red-light');
            const yellowLight = document.getElementById('yellow-light');
            const greenLight = document.getElementById('green-light');

            // Tüm ışıkları kapatma ve sarı ışık yanıp sönme işlemini durdurma fonksiyonu

            clearLights = function () {
                redLight.style.opacity = 0.5;
                yellowLight.style.opacity = 0.5;
                greenLight.style.opacity = 0.5;

                // Tüm interval'ları durdur
                if (flashingYellowInterval) {
                    clearInterval(flashingYellowInterval);
                    flashingYellowInterval = null;
                }
                if (flashingGreenInterval) {
                    clearInterval(flashingGreenInterval);
                    flashingGreenInterval = null;
                }
                if (flashingRedInterval) {
                    clearInterval(flashingRedInterval);
                    flashingRedInterval = null;
                }
            };


            turnOnYellowLight = function () {
                clearLights(); // Önce tüm ışıkları kapat
                setTimeout(function () {
                    yellowLight.style.opacity = 2; 
                    let yellowOn = true;
                    flashingYellowInterval = setInterval(function () {
                        yellowLight.style.opacity = yellowOn ? 0.5 : 2;
                        yellowOn = !yellowOn;
                    }, 300);
                }, 500);
            };


             turnOnRedLight = function () {
                clearLights(); // Önce tüm ışıkları kapat
                setTimeout(function () {
                    redLight.style.opacity = 2; 
                    let redOn = true;
                    flashingRedInterval = setInterval(function () {
                        redLight.style.opacity = redOn ? 0.5 : 2;
                        redOn = !redOn;
                    }, 300);
                }, 500);
            };


            turnOnGreenLight = function () {
                if (flashingGreenInterval) clearInterval(flashingGreenInterval);
                clearLights(); // Önce tüm ışıkları kapat
                setTimeout(function () {
                    greenLight.style.opacity = 2;
                    let greenOn = true;
                    flashingGreenInterval = setInterval(function () {
                        greenLight.style.opacity = greenOn ? 0.5 : 2;
                        greenOn = !greenOn;
                    }, 300);
                }, 500);
            };





        });



        function getMachineIdFromUrl() {
            var currentUrl = window.location.pathname; // mevcut sayfanın URL yolunu alır
            var urlSegments = currentUrl.split('/'); // URL yolunu '/' karakterine göre bölerek diziye dönüştürür
            return urlSegments.pop(); // dizinin son elemanını alır (bu durumda machineId olmalıdır)
        }



        $(document).ready(function () {
            var machineId = getMachineIdFromUrl();


            $('#hazirlikBaslat').click(function () {
                $.ajax({
                    url: '@Url.Action("StartPreparation", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationNameId: 1 },
                    success: function (response) {
                        if (response.success) {
                            console.log('Hazırlık başlatıldı.');
                        }
                    }
                });
            });

            $('#hazirlikBitir').click(function () {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: '@Url.Action("StopPreparation", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationNameId: 2 },
                    success: function (response) {
                        if (response.success) {
                            console.log('Hazırlık durduruldu.');
                        }
                    }
                });
            });
            

            $('#durusBaslat').click(function () {
                $.ajax({
                    url: '@Url.Action("StartBasedOnSpecificReason", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationNameId: 7 },
                    success: function (response) {
                        if (response.success) {
                            console.log('Duruş başlatıldı.');
                        }
                    }
                });
            });

            $('#durusBitir').click(function () {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: '@Url.Action("StopBasedOnSpecificReason", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationNameId: 8 },
                    success: function (response) {
                        if (response.success) {
                            console.log('Duruş durduruldu.');
                        }
                    }
                });
            });


            $('#uretimBaslat').click(function () {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: '@Url.Action("StartProduction", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationNameId: 3 },
                    success: function (response) {
                        if (response.success) {
                            console.log('Üretim başlatıldı.');
                        }
                    }
                });
            });

          


            $('#uretimiDurdur').click(function () {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: '@Url.Action("StopProduction", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationNameId: 4 },
                    success: function (response) {
                        if (response.success) {
                            console.log('üretim durduruldu.');
                        }
                    }
                });
            });

            


            /*  !** */
            $('#otomatikUretimBaslat').click(function () {
                var sureInput = $('#otomatikVeriGirisi');
                var sure = parseInt(sureInput.val(), 10); // Sayıyı düzgün bir şekilde çözümlemek için parseInt kullanılır.

                // sure değeri NaN değilse ve 0'dan büyükse konsola mesaj yazdırılır.
                if (!isNaN(sure) && sure > 0) {
                    console.log('Otomatik Üretim başlatıldı.');
                } else {
                    sureInput.focus(); // Kullanıcıyı tekrar giriş alanına yönlendirir.
                }
            });

        });



    </script>

    <script>
        var graphsPerPage = 1; // Her sayfada görüntülenecek grafik sayısı
        var currentPage = 1; // Başlangıçta görüntülenecek sayfa
        var parametersData = {}; // Parametre verileri burada saklanacak
        var totalPages = 0; // Toplam sayfa sayısı, hesaplanacak
        $(document).ready(function () {

            

            function changePage(delta) {
                currentPage += delta;
                // Sayfa sınırlarını kontrol et
                currentPage = Math.max(1, Math.min(currentPage, totalPages));
                createCharts(currentPage);
            }

            function createCharts() {
                var graphsContainer = $('#graphs-container');
                graphsContainer.empty(); // Mevcut grafikleri temizle

                var parameterNames = Object.keys(parametersData);

                // Renk paleti
                var colors = [
                    'rgba(255, 99, 132, 1)',  // Kırmızı
                    'rgba(54, 162, 235, 1)',  // Mavi
                    'rgba(255, 206, 86, 1)',   // Sarı
                    'rgba(75, 192, 192, 1)',   // Turkuaz
                    'rgba(153, 102, 255, 1)',  // Mor
                    'rgba(255, 159, 64, 1)',   // Turuncu
                    // Diğer renkler eklenebilir
                ];

                var datasets = parameterNames.map(function (parameterName, index) {
                    var values = parametersData[parameterName];
                    // Her parametre için farklı bir renk, renk sayısını aşarsa tekrar başa dön
                    var color = colors[index % colors.length];
                    return {
                        label: parameterName,
                        data: values,
                        backgroundColor: color,
                        borderColor: color.replace('0.5', '1'), // Şeffaflığı kaldırarak sınır rengini belirler
                        borderWidth: 1,
                        fill: false
                    };
                });

                var canvasId = 'combined-graph';
                var graphDiv = $('<div>', {
                    class: 'graph-card',
                    html: $('<canvas>', { id: canvasId }),
                    style: 'width: 100% ; height:80% ; margin:auto;padding-top:4rem'
                });

                graphsContainer.append(graphDiv);

                var ctx = document.getElementById(canvasId).getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: Array.from({ length: parametersData[parameterNames[0]].length }, (_, i) => 'Ölçüm ' + (i + 1)),
                        datasets: datasets
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }


            function getMachineIdFromUrl() {
                var currentUrl = window.location.pathname; // mevcut sayfanın URL yolunu alır
                var urlSegments = currentUrl.split('/'); // URL yolunu '/' karakterine göre bölerek diziye dönüştürür
                // URL'den makine ID'sini (genellikle son segment olarak) çıkarır
                var machineId = urlSegments[urlSegments.length - 1] || urlSegments[urlSegments.length - 2];
                // Son segment boş bir string ise (örneğin, URL '/' ile bitiyorsa), önceki segmenti kullan
                if (machineId === '') {
                    machineId = urlSegments[urlSegments.length - 2];
                }
                return machineId;
            }

            // Veri yükleme işlemi
            // Makine ID'sini URL'den almak için fonksiyon
            function getMachineIdFromUrl() {
                var currentUrl = window.location.pathname; // mevcut sayfanın URL yolunu alır
                var urlSegments = currentUrl.split('/'); // URL yolunu '/' karakterine göre bölerek diziye dönüştürür
                // URL'den makine ID'sini (genellikle son segment olarak) çıkarır
                var machineId = urlSegments[urlSegments.length - 1] || urlSegments[urlSegments.length - 2];
                // Son segment boş bir string ise (örneğin, URL '/' ile bitiyorsa), önceki segmenti kullan
                if (machineId === '') {
                    machineId = urlSegments[urlSegments.length - 2];
                }
                return machineId;
            }

           


            //Grafik Parametreleri Reload yapma:

            function reloadGraphs() {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: 'Machine/GetMachineParameters/' + machineId,
                    type: 'GET',
                    cache: false,
                    success: function (data) {
                        // Mevcut grafik verilerini temizle
                        parametersData = {};
                        data.forEach(function (param) {
                            parametersData[param.parameterName] = param.parameterValue.map(Number);
                        });
                        totalPages = Math.ceil(Object.keys(parametersData).length / graphsPerPage);
                        createCharts(currentPage);
                    }
                });
            }

           
            $(document).ready(function () {
               
                sendStartProductionRequest(3, function () {
                    // sendStartProductionRequest fonksiyonunun tamamlanmasını izle ve 300ms sonra sendModbusWriteStrings fonksiyonunu tetikle
                    setTimeout(function () {
                        sendModbusWriteStrings(function () {
                            // sendModbusWriteStrings fonksiyonunun tamamlanmasını izle
                            // Ardından sendStartProductionRequest fonksiyonunu her 15 saniyede bir çalıştırmak için bir interval başlat
                            setInterval(function () {
                                sendStartProductionRequest(3);
                            }, 15000);

                            // Aynı zamanda, sendModbusWriteStrings fonksiyonunu her 15.51 saniyede bir çalıştırmak için bir interval başlat
                            setInterval(sendModbusWriteStrings, 15510);
                        });
                    }, 300);
                });
            });

            function sendStartProductionRequest(operationId, callback) {
                console.log('Operation ID:', operationId);
                var machineId = getMachineIdFromUrl();
                console.log('Makine ID:', machineId);

                fetch(`/start/${machineId}?operationId=${operationId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({})
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        updateParameterDisplay(data.parameters);
                        reloadGraphs();
                        if (callback) callback();
                    })
                    .catch(error => {
                        console.error('Üretimi başlatırken bir hata oluştu:', error);
                    });
            }

            function sendModbusWriteStrings(callback) {
                var machineId = getMachineIdFromUrl();
                console.log('Machine ID:', machineId);

                var parameters = document.querySelectorAll('.card-title[data-parameter-name]');
                var strings = Array.from(parameters).map(function (param) {
                    return param.textContent || param.innerText;
                });
                console.log(strings);

                fetch('/modbus/writestrings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ machineId: machineId, strings: strings })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Cevap alınamadı');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Makine Değerleri Gönderildi', data);
                        if (callback) callback();
                    })
                    .catch(error => {
                        console.error('Veri Gönderilirken hata oluştu', error);
                    });
            }

            // Parametreleri güncellemek için fonksiyon
            function updateParameterDisplay(parameters) {
                for (const key in parameters) {
                    if (parameters.hasOwnProperty(key)) {
                        const value = parameters[key];
                        const parameterElement = document.querySelector(`.card-body h4[data-parameter-name="${key}"]`);
                        if (parameterElement) {
                            parameterElement.textContent = value;
                        }
                    }
                }
            }



        });




    </script>


    <script>
        $(document).ready(function () {
            var hazirlikTimer, uretimTimer;
            var uretimSuresi = 0, manuelToplamSure = 0;
            var hazirlikSuresi = 0, hazirlikDurusSüresi = 0;

            var toplamUretimSuresi = 0;

            var manuelUretimAdedi = 0;
            var hazirlikSuresiEklendi = false;
            var uretimSuresiListesi = [];  // Üretim sürelerini saklamak için bir liste
            var toplamDurusSuresi = 0;

            function getMachineIdFromUrl() {
                var currentUrl = window.location.pathname; // mevcut sayfanın URL yolunu alır
                var urlSegments = currentUrl.split('/'); // URL yolunu '/' karakterine göre bölerek diziye dönüştürür
                return urlSegments.pop(); // dizinin son elemanını alır (bu durumda machineId olmalıdır)
            }

            $(document).ready(function () {
                // Butonlara tıklanma olaylarını ekle
                $('#hazirlikBaslat').click(function () {
                    sendLog('Hazırlık Başlat');
                });

                $('#hazirlikBitir').click(function () {
                    sendLog('Hazırlık Bitir');
                });

                $('#uretimBaslat').click(function () {
                    sendLog('Üretim Başlat');
                });

                $('#uretimiDurdur').click(function () {
                    sendLog('Üretimi Durdur');
                });

                $('#otomatikUretimBaslat').click(function () {
                    sendLog('Otomatik Üretimi Başlat');
                });

                $('#otomatikUretimiDurdur').click(function () {
                    sendLog('Otomatik Üretimi Durdur');
                });

                $('#durusBaslat').click(function () {
                    sendLog('Duruş Başlat');
                });

                $('#durusBitir').click(function () {
                    sendLog('Duruş Bitir');
                });

                // Log kayıtlarını sayfa yüklendiğinde getir
                updateLogRecords();
            });

            function updateLogRecords() {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: '/machine/getLogs/' + machineId,
                    type: 'GET',
                    dataType: 'json',
                    success: function (logs) {
                        var operationNames = {
                            1: 'Hazırlık Başlat',
                            2: 'Hazırlık Bitir',
                            3: 'Üretim Başlat',
                            4: 'Üretimi Durdur',
                            5: 'Otomatik Üretimi Başlat',
                            6: 'Otomatik Üretimi Durdur',
                            7: 'Duruş Başlat',
                            8: 'Duruş Bitir'
                        };

                        // Bugünün tarihini al
                        var today = new Date().toISOString().split('T')[0];

                        var logsHtml = logs
                            .filter(function (log) {
                                // Logun tarihi bugünün tarihine eşitse true döndür
                                return new Date(log.timestamp).toISOString().split('T')[0] === today;
                            })
                            .map(function (log) {
                                var operationName = operationNames[log.operationId] || 'Bilinmeyen İşlem';
                                return '<tr><td>' + operationName + '</td><td>' + new Date(log.timestamp).toLocaleString() + '</td></tr>';
                            })
                            .join('');
                        $('#logTableBody').html(logsHtml);
                    },
                    error: function (xhr, status, error) {
                        console.error('Log kayıtları güncellenirken hata oluştu: ', error);
                    }
                });
            }

            function sendLog(action) {
                var operationId;
                switch (action) {
                    case 'Hazırlık Başlat':
                        operationId = 1;
                        break;
                    case 'Hazırlık Bitir':
                        operationId = 2;
                        break;
                    case 'Üretim Başlat':
                        operationId = 3;
                        break;
                    case 'Üretimi Durdur':
                        operationId = 4;
                        break;
                    case 'Otomatik Üretimi Başlat':
                        operationId = 5;
                        break;
                    case 'Otomatik Üretimi Durdur':
                        operationId = 6;
                        break;
                    case 'Duruş Başlat':
                        operationId = 7;
                        break;
                    case 'Duruş Bitir':
                        operationId = 8;
                        break;
                    default:
                        operationId = 0;
                        break;
                }

                $.ajax({
                    url: '/machine/logoperation',
                    type: 'POST',
                    data: JSON.stringify({
                        MachineId: getMachineIdFromUrl(),
                        OperationId: operationId,
                        Timestamp: new Date().toISOString()
                    }),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (response) {
                        updateLogRecords();
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                    }
                });
            }

            function getMachineIdFromUrl() {
                var url = window.location.href;
                var machineId = url.substring(url.lastIndexOf('/') + 1);
                return machineId;
            }





            $('#hazirlikBaslat').click(function () {
                hazirlikSuresi = 0;
                $(this).prop('disabled', true);
                $('#hazirlikBitir').prop('disabled', false);
                hazirlikTimer = setInterval(function () {
                    hazirlikSuresi++;
                    $('#sure').text(hazirlikSuresi);  // Hazırlık süresini güncelle
                }, 1000);
             

            });

            $('#hazirlikBitir').click(function () {
                clearInterval(hazirlikTimer);
                $('#hazirlikBaslat').prop('disabled', false);  // Bu butonun tekrar etkinleştirilmesi gerekiyor.
                $(this).prop('disabled', true);
                hazirlikDurusSüresi += hazirlikSuresi;
                toplamDurusSuresi += hazirlikDurusSüresi;
                $('#toplamDurusSuresi').text(toplamDurusSuresi + " saniye");
                hazirlikSuresi = 0;
                $('#sure').text(hazirlikSuresi);  // Hazırlık süresini sıfırla
                $('#hazirlikDurusSüresi').text(hazirlikDurusSüresi + " saniye");
                

            });
            $('#uretimBaslat').click(function () {
                uretimSuresi = 0;
                $(this).prop('disabled', true);
                $('#uretimiDurdur').prop('disabled', false);
                uretimTimer = setInterval(function () {
                    uretimSuresi++;
                    $('#uretimSuresi').text(uretimSuresi);
                }, 1000);
                

            });

            $('#uretimiDurdur').click(function () {
                clearInterval(uretimTimer);
                $('#uretimBaslat').prop('disabled', false);
                $(this).prop('disabled', true);
                uretimSuresiListesi.push(uretimSuresi);  // Üretim süresini listeye ekle
                manuelToplamSure += uretimSuresi;
                manuelUretimAdedi++;
                uretimSuresi = 0;
                $('#uretimSuresi').text(uretimSuresi);
                $('#manuelToplamSure').text(manuelToplamSure + " saniye");
                $('#uretimSuresiListesi').text(uretimSuresiListesi.join(', '));  // Listeyi göster
                $('#manuelUretimAdedi').text(manuelUretimAdedi);
            

            });



          

            /* DURUS */

            var otomatikUretimTimer, uretimTimer;
            var sure, baslangicSuresi, uretimSuresi = 0,uretimSayisi=0,AdetUretimSayisi=0;
            var toplamOtomatikUretimSuresi = 0;
            var otomatikUretimAktif = false, manuelUretimAktif = false;
            var otomatikUretimSuresiListesi = [];

            // Otomatik Üretim Kontrolleri
            document.getElementById('otomatikUretimBaslat').addEventListener('click', function () {
                var sureInput = document.getElementById('otomatikVeriGirisi');
                sure = parseInt(sureInput.value);
                baslangicSuresi = sure;
                if (isNaN(sure) || sure <= 0) {
                    sureInput.focus();
                    return;
                }
                otomatikUretimAktif = true;
                document.getElementById('otomatikUretimSuresi').innerText = sure;
                sureInput.disabled = true;
                document.getElementById('otomatikUretimiDurdur').disabled = false;
                otomatikUretimGuncelle();
                baslatOtomatikUretim();
            });




            // Manuel Üretim Kontrolleri
            $('#uretimBaslat').click(function () {
                manuelUretimAktif = true;
                uretimSuresi = 0;
                $('#uretimSuresi').text(uretimSuresi);
                clearInterval(uretimTimer);
                uretimTimer = setInterval(function () {
                    uretimSuresi++;
                    $('#uretimSuresi').text(uretimSuresi);
                }, 1000);
            });

            // Durus Kontrolleri
            var durusTimeout;
            var durusInterval;
            

            $('#durusBaslat').click(function () {
                var stoppageDuration = parseInt($('#stoppageReasonSelect').val());

                if (isNaN(stoppageDuration) || stoppageDuration <= 0) {
                    alert("Lütfen geçerli bir süre giriniz.");
                    return;
                }

                turnOnRedLight();
                if (otomatikUretimAktif) clearInterval(otomatikUretimTimer);
                if (manuelUretimAktif) clearInterval(uretimTimer);

                clearTimeout(durusTimeout);
                clearInterval(durusInterval);

                $('#durusSuresi').text(stoppageDuration);

                // Süre 0'da durması için süre azaltımı başlamadan önce süreyi kontrol et
                if (stoppageDuration > 0) {
                    durusInterval = setInterval(function () {
                        stoppageDuration--;
                        $('#durusSuresi').text(stoppageDuration);

                        if (stoppageDuration <= 0) {
                            clearInterval(durusInterval);
                            $('#durusSuresi').text(0);
                            $('#durusBitir').click(); // Süre 0'a ulaştığında duruş bitirme işlemi
                        }
                    }, 1000);
                }

                durusTimeout = setTimeout(function () {
                    $('#durusBitir').click();
                }, stoppageDuration * 1000);
            });


            $('#durusBitir').click(function () {
                clearTimeout(durusTimeout);
                clearInterval(durusInterval);
                triggerDurusBitir();
                $('#durusSuresi').text(0);
            });

            function triggerDurusBitir() {
                var beklenenSure = parseInt($('#stoppageReasonSelect').val());
                var gerceklesenSure = beklenenSure - parseInt($('#durusSuresi').text());

                toplamDurusSuresi += gerceklesenSure;
                $('#toplamDurusSuresi').text(toplamDurusSuresi+" saniye");

                // Duruş Durumları tablosunu güncelle
                var currentDate = new Date().toLocaleDateString('tr-TR');
                var durusTuru = $('#stoppageReasonSelect option:selected').text();
                var newRow = `
                <tr>
                    <td>${currentDate}</td>
                    <td>${durusTuru}</td>
                    <td>${beklenenSure} saniye</td>
                    <td>${gerceklesenSure} saniye</td>
                </tr>`;
                $('#durusDurumlari tbody').append(newRow);

                if (otomatikUretimAktif) {
                    baslatOtomatikUretim();
                }
                if (manuelUretimAktif) {
                    clearInterval(uretimTimer);
                    uretimTimer = setInterval(function () {
                        uretimSuresi++;
                        $('#uretimSuresi').text(uretimSuresi);
                    }, 1000);
                }
                if (!manuelUretimAktif && otomatikUretimAktif) {
                    $('#uretimSuresi').text(0);
                }
            }




            function otomatikUretimGuncelle() {
                document.getElementById('otomatikUretimSuresi').innerText = sure;
                if (sure === -1) {
                    if (otomatikUretimAktif) {
                        sure = baslangicSuresi;
                        otomatikUretimGuncelle();
                        uretimSayisi++;
                        AdetUretimSayisi++;
                        console.log("Otomatik üretim sayacı:" + AdetUretimSayisi);
                    } else {
                        clearInterval(otomatikUretimTimer);
                    }
                } else {
                    sure--;
                }
            }

            function baslatOtomatikUretim() {
                clearInterval(otomatikUretimTimer);
                otomatikUretimTimer = setInterval(otomatikUretimGuncelle, 1000);
            }


            document.getElementById('otomatikUretimiDurdur').addEventListener('click', function () {
                otomatikUretimAktif = false;
                clearInterval(otomatikUretimTimer);
                document.getElementById('otomatikVeriGirisi').disabled = false;
                document.getElementById('otomatikUretimiDurdur').disabled = true;
                document.getElementById('otomatikUretimSuresi').innerText = '0';
            });
            document.getElementById('uretimiDurdur').addEventListener('click', function () {
                manuelUretimAktif = false;
                uretimSuresi = 0;
            });

            /* DURUS */

            $(document).ready(function () {
                var machineId = getMachineIdFromUrl();

                $('#otomatikUretimiDurdur').click(function () {
                    var machineId = getMachineIdFromUrl();
                    $.ajax({
                        url: '@Url.Action("StopAutomaticProduction", "Modbus")',
                        type: 'POST',
                        data: { machineId: machineId, registerİntValue: uretimSayisi, operationNameId: 6 },
                        success: function (response) {
                            if (response.success) {
                                console.log('Otomatik Üretim durduruldu.');
                                $('#uretimSayisi').text(uretimSayisi);  

                                var sureInput = document.getElementById('otomatikVeriGirisi');
                                sure = parseInt(sureInput.value);
                                toplamOtomatikUretimSuresi += sure * AdetUretimSayisi;
                                document.getElementById('otoUretimSuresi').innerText = toplamOtomatikUretimSuresi + " saniye";
                                AdetUretimSayisi = 0;

                                otomatikUretimSuresiListesi.push(sure);
                                $('#otomatikUretimSuresiListesi').text(otomatikUretimSuresiListesi.join(', '));

                                
                            }
                        }
                    });
                });

            });



            // Başlangıçta butonları uygun duruma getir
            $('#hazirlikBitir').prop('disabled', true);
            $('#uretimiDurdur').prop('disabled', true);

        });
       

    </script>



</body>
</html>