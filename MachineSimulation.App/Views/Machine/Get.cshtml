@model MachineDetailsDto

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/get.css" asp-append-version="true" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</head>
<body>
    <div class="mt-3">
        <div class="pb-3">
            <h3>@Model.MachineName</h3>

        </div>
        <div class="row">

            <div class="col-md-6">

                <div class="card-div graph-card-green mt-4 align-top">

                    <div class="parametre-card ">
                        <h4 class="parametre-card-title">
                            Parametre Grafikleri
                        </h4>
                    </div>
                    <hr class="line-for-cart" />
                    <div id="graphs-container" class="graphs-property">
                        <!-- JavaScript ile dinamik olarak grafik kartları buraya eklenecek -->
                    </div>
                </div>
                <div class="graph-card-orange kalite-card-div h-100 scrollable-quality-datas">
                    <div class="kalite-card">
                        <h4 class="kalite-card-title">
                            Kalite Kriter Verisi
                        </h4>
                    </div>

                    <hr class="line-for-cart" />
                    <div class="row">
                        @foreach (var parameter in Model.Parameters)
                        {
                            <div class="col-md-6 mb-2">

                                <div class="card white-border-card" style="text-align:center;align-content:center">
                                    <div class="card-header" title="@parameter.ParameterName">
                                        <h6>@parameter.ParameterName</h6>
                                    </div>
                                    <div class="card-body">

                                        <h4 class="card-title" data-parameter-name="@parameter.ParameterName" data-parameter-value="@parameter.ParameterValue">0</h4>
                                    </div>

                                </div>
                            </div>

                        }
                    </div>
                </div>

            </div>

            <!-- İkinci içerik alanı -->
            <div class="col-md-6">


                <div class="log-card-div graph-card-pink mt-4 align-top scrollable-logs">

                    <div class="uretim-card">
                        <h4 class="uretim-card-title">
                            Üretim Verisi
                        </h4>
                    </div>

                    <hr class="line-for-uretim-cart" />

                    <!-- Hazırlık bölümü -->
                    <div class="hazirlik-bolumu">
                        <div class="buton-grubu">
                            <button id="hazirlikBaslat" class="btn btn-green">Hazırlık Başlat</button>
                            <button id="hazirlikBitir" class="btn btn-red">Hazırlık Bitir</button>
                        </div>
                        <div class="sure-label-grubu">
                            <span id="hazirlikSuresiLabel" class="süre-label"><span id="sure">0</span></span>
                        </div>
                    </div>

                    <hr />

                    <!-- Üretim bölümü -->
                    <div class="uretim-bolumu">
                        <div class="buton-grubu">
                            <button id="uretimBaslat" class="btn btn-green">Üretim Başlat</button>
                            <button id="uretimiDurdur" class="btn btn-red">Üretimi Durdur</button>
                        </div>
                        <div class="sure-label-grubu">
                            <span id="uretimSuresiLabel" class="süre-label"><span id="uretimSuresi">0</span></span>

                            @* <div id="uretimSuresiListesi">Üretim Süreleri: </div> *@
                        </div>
                    </div>
                    <hr />
                    <!-- Toplam süre -->
                    <div class="d-flex flex-column align-items-center">
                        <span id="toplamSureLabel" class="sure-label mb-1">Toplam Üretim Süresi: <span id="toplamSure">0</span></span>

                    </div>

                </div>

                <div class="uretim-card-div graph-card-blue align-top scrollable-production-datas">


                    <div class="container">
                        <div class="log-card ">
                            <h4 class="log-card-title">
                                Log Kayıtları
                            </h4>
                        </div>

                        <hr class="line-for-cart" />
                        <partial name="_OperationLogs" model="Model.OperationLogs" />
                    </div>


                </div>



            </div>



        </div>

    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.7.12/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        function getMachineIdFromUrl() {
            var currentUrl = window.location.pathname; // mevcut sayfanın URL yolunu alır
            var urlSegments = currentUrl.split('/'); // URL yolunu '/' karakterine göre bölerek diziye dönüştürür
            return urlSegments.pop(); // dizinin son elemanını alır (bu durumda machineId olmalıdır)
        }



        $(document).ready(function () {
            var machineId = getMachineIdFromUrl();
            $('#hazirlikBaslat').click(function () {
                $.ajax({
                    url: '@Url.Action("StartPreparation", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationName: 'Hazırlık Başlat' },
                    success: function (response) {
                        if (response.success) {
                            console.log('Hazırlık başlatıldı.');
                        }
                    }
                });
            });

            $('#hazirlikBitir').click(function () {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: '@Url.Action("StopPreparation", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationName: 'Hazırlık Bitir' },
                    success: function (response) {
                        if (response.success) {
                            console.log('Hazırlık durduruldu.');
                        }
                    }
                });
            });


            $('#uretimBaslat').click(function () {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: '@Url.Action("StartProduction", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationName: 'Üretim Başlat' },
                    success: function (response) {
                        if (response.success) {
                            console.log('Üretim başlatıldı.');
                        }
                    }
                });
            });

            $('#uretimiDurdur').click(function () {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: '@Url.Action("StopProduction", "Modbus")',
                    type: 'POST',
                    data: { machineId: machineId, operationName: 'Üretim Bitir' },
                    success: function (response) {
                        if (response.success) {
                            console.log('Üretim durduruldu.');
                        }
                    }
                });
            });
        });
    </script>

    <script>
        var graphsPerPage = 1; // Her sayfada görüntülenecek grafik sayısı
        var currentPage = 1; // Başlangıçta görüntülenecek sayfa
        var parametersData = {}; // Parametre verileri burada saklanacak
        var totalPages = 0; // Toplam sayfa sayısı, hesaplanacak
        $(document).ready(function () {

            

            function changePage(delta) {
                currentPage += delta;
                // Sayfa sınırlarını kontrol et
                currentPage = Math.max(1, Math.min(currentPage, totalPages));
                createCharts(currentPage);
            }

            function createCharts() {
                var graphsContainer = $('#graphs-container');
                graphsContainer.empty(); // Mevcut grafikleri temizle

                var parameterNames = Object.keys(parametersData);

                // Renk paleti
                var colors = [
                    'rgba(255, 99, 132, 1)',  // Kırmızı
                    'rgba(54, 162, 235, 1)',  // Mavi
                    'rgba(255, 206, 86, 1)',   // Sarı
                    'rgba(75, 192, 192, 1)',   // Turkuaz
                    'rgba(153, 102, 255, 1)',  // Mor
                    'rgba(255, 159, 64, 1)',   // Turuncu
                    // Diğer renkler eklenebilir
                ];

                var datasets = parameterNames.map(function (parameterName, index) {
                    var values = parametersData[parameterName];
                    // Her parametre için farklı bir renk, renk sayısını aşarsa tekrar başa dön
                    var color = colors[index % colors.length];
                    return {
                        label: parameterName,
                        data: values,
                        backgroundColor: color,
                        borderColor: color.replace('0.5', '1'), // Şeffaflığı kaldırarak sınır rengini belirler
                        borderWidth: 1,
                        fill: false
                    };
                });

                var canvasId = 'combined-graph';
                var graphDiv = $('<div>', {
                    class: 'graph-card',
                    html: $('<canvas>', { id: canvasId })
                });

                graphsContainer.append(graphDiv);

                var ctx = document.getElementById(canvasId).getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: Array.from({ length: parametersData[parameterNames[0]].length }, (_, i) => 'Ölçüm ' + (i + 1)),
                        datasets: datasets
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }


            function getMachineIdFromUrl() {
                var currentUrl = window.location.pathname; // mevcut sayfanın URL yolunu alır
                var urlSegments = currentUrl.split('/'); // URL yolunu '/' karakterine göre bölerek diziye dönüştürür
                // URL'den makine ID'sini (genellikle son segment olarak) çıkarır
                var machineId = urlSegments[urlSegments.length - 1] || urlSegments[urlSegments.length - 2];
                // Son segment boş bir string ise (örneğin, URL '/' ile bitiyorsa), önceki segmenti kullan
                if (machineId === '') {
                    machineId = urlSegments[urlSegments.length - 2];
                }
                return machineId;
            }

            // Veri yükleme işlemi
            // Makine ID'sini URL'den almak için fonksiyon
            function getMachineIdFromUrl() {
                var currentUrl = window.location.pathname; // mevcut sayfanın URL yolunu alır
                var urlSegments = currentUrl.split('/'); // URL yolunu '/' karakterine göre bölerek diziye dönüştürür
                // URL'den makine ID'sini (genellikle son segment olarak) çıkarır
                var machineId = urlSegments[urlSegments.length - 1] || urlSegments[urlSegments.length - 2];
                // Son segment boş bir string ise (örneğin, URL '/' ile bitiyorsa), önceki segmenti kullan
                if (machineId === '') {
                    machineId = urlSegments[urlSegments.length - 2];
                }
                return machineId;
            }

           


            //Grafik Parametreleri Reload yapma:

            function reloadGraphs() {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: 'Machine/GetMachineParameters/' + machineId,
                    type: 'GET',
                    cache: false,
                    success: function (data) {
                        // Mevcut grafik verilerini temizle
                        parametersData = {};
                        data.forEach(function (param) {
                            parametersData[param.parameterName] = param.parameterValue.map(Number);
                        });
                        totalPages = Math.ceil(Object.keys(parametersData).length / graphsPerPage);
                        createCharts(currentPage);
                    }
                });
            }

           
            $(document).ready(function () {
               
                sendStartProductionRequest(3, function () {
                    // sendStartProductionRequest fonksiyonunun tamamlanmasını izle ve 300ms sonra sendModbusWriteStrings fonksiyonunu tetikle
                    setTimeout(function () {
                        sendModbusWriteStrings(function () {
                            // sendModbusWriteStrings fonksiyonunun tamamlanmasını izle
                            // Ardından sendStartProductionRequest fonksiyonunu her 15 saniyede bir çalıştırmak için bir interval başlat
                            setInterval(function () {
                                sendStartProductionRequest(3);
                            }, 15000);

                            // Aynı zamanda, sendModbusWriteStrings fonksiyonunu her 15.51 saniyede bir çalıştırmak için bir interval başlat
                            setInterval(sendModbusWriteStrings, 15510);
                        });
                    }, 300);
                });
            });

            function sendStartProductionRequest(operationId, callback) {
                console.log('Operation ID:', operationId);
                var machineId = getMachineIdFromUrl();
                console.log('Makine ID:', machineId);

                fetch(`/start/${machineId}?operationId=${operationId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({})
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        updateParameterDisplay(data.parameters);
                        reloadGraphs();
                        if (callback) callback();
                    })
                    .catch(error => {
                        console.error('Üretimi başlatırken bir hata oluştu:', error);
                    });
            }

            function sendModbusWriteStrings(callback) {
                var machineId = getMachineIdFromUrl();
                console.log('Machine ID:', machineId);

                var parameters = document.querySelectorAll('.card-title[data-parameter-name]');
                var strings = Array.from(parameters).map(function (param) {
                    return param.textContent || param.innerText;
                });
                console.log(strings);

                fetch('/modbus/writestrings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ machineId: machineId, strings: strings })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Cevap alınamadı');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Makina Değerleri Gönderildi', data);
                        if (callback) callback();
                    })
                    .catch(error => {
                        console.error('Veri Gönderilirken hata oluştu', error);
                    });
            }

            // Parametreleri güncellemek için fonksiyon
            function updateParameterDisplay(parameters) {
                for (const key in parameters) {
                    if (parameters.hasOwnProperty(key)) {
                        const value = parameters[key];
                        const parameterElement = document.querySelector(`.card-body h4[data-parameter-name="${key}"]`);
                        if (parameterElement) {
                            parameterElement.textContent = value;
                        }
                    }
                }
            }



        });




    </script>
    <script>
        $(document).ready(function () {
            var hazirlikTimer, uretimTimer;
            var hazirlikSuresi = 0, uretimSuresi = 0, toplamSure = 0;
            var hazirlikSuresiEklendi = false;
            var uretimSuresiListesi = [];  // Üretim sürelerini saklamak için bir liste

            function getMachineIdFromUrl() {
                var currentUrl = window.location.pathname; // mevcut sayfanın URL yolunu alır
                var urlSegments = currentUrl.split('/'); // URL yolunu '/' karakterine göre bölerek diziye dönüştürür
                return urlSegments.pop(); // dizinin son elemanını alır (bu durumda machineId olmalıdır)
            }


            function updateLogRecords() {
                var machineId = getMachineIdFromUrl();
                $.ajax({
                    url: '/machine/getLogs/' + machineId,
                    type: 'GET',
                    dataType: 'json',
                    success: function (logs) {
                        var operationNames = {
                            1: 'Hazırlık Başlat',
                            2: 'Hazırlık Bitir',
                            3: 'Üretim Başlat',
                            4: 'Üretimi Durdur',
                        };

                        var logsHtml = logs.map(function (log) {
                            var operationName = operationNames[log.operationId] || 'Bilinmeyen İşlem';
                            return '<tr><td>' + operationName + '</td><td>' + new Date(log.timestamp).toLocaleString() + '</td></tr>';
                        }).join('');
                        $('tbody').html(logsHtml);
                    },
                    error: function (xhr, status, error) {
                        console.error('Log kayıtları güncellenirken hata oluştu: ', error);
                    }
                });
            }

            function sendLog(action) {
                $.ajax({
                    url: '/machine/logoperation',
                    type: 'POST',
                    data: JSON.stringify({
                        MachineId: getMachineIdFromUrl(),
                        OperationId: action === 'Hazırlık Başlat' ? 1 : (action === 'Hazırlık Bitir' ? 2 : (action === 'Üretim Başlat' ? 3 : 4)),
                        Timestamp: new Date().toISOString()
                    }),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (response) {

                        updateLogRecords();
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                    }
                });
            }


            $('#hazirlikBaslat').click(function () {
                hazirlikSuresi = 0;
                $(this).prop('disabled', true);
                $('#hazirlikBitir').prop('disabled', false);
                hazirlikTimer = setInterval(function () {
                    hazirlikSuresi++;
                    $('#sure').text(hazirlikSuresi);  // Hazırlık süresini güncelle
                }, 1000);
                sendLog('Hazırlık Başlat');

            });

            $('#hazirlikBitir').click(function () {
                clearInterval(hazirlikTimer);
                $('#hazirlikBaslat').prop('disabled', false);  // Bu butonun tekrar etkinleştirilmesi gerekiyor.
                $(this).prop('disabled', true);
                toplamSure += hazirlikSuresi;
                hazirlikSuresi = 0;
                $('#sure').text(hazirlikSuresi);  // Hazırlık süresini sıfırla
                $('#toplamSure').text(toplamSure + " saniye");
                sendLog('Hazırlık Bitir');

            });
            $('#uretimBaslat').click(function () {
                uretimSuresi = 0;
                $(this).prop('disabled', true);
                $('#uretimiDurdur').prop('disabled', false);
                uretimTimer = setInterval(function () {
                    uretimSuresi++;
                    $('#uretimSuresi').text(uretimSuresi);
                }, 1000);
                sendLog('Üretim Başlat');

            });

            $('#uretimiDurdur').click(function () {
                clearInterval(uretimTimer);
                $('#uretimBaslat').prop('disabled', false);
                $(this).prop('disabled', true);
                uretimSuresiListesi.push(uretimSuresi);  // Üretim süresini listeye ekle
                toplamSure += uretimSuresi;
                uretimSuresi = 0;
                $('#uretimSuresi').text(uretimSuresi);
                $('#toplamSure').text(toplamSure + " saniye");
                $('#uretimSuresiListesi').text('Üretim Süreleri: ' + uretimSuresiListesi.join(', '));  // Listeyi göster
                sendLog('Üretim Bitir');

            });

            // Başlangıçta butonları uygun duruma getir
            $('#hazirlikBitir').prop('disabled', true);
            $('#uretimiDurdur').prop('disabled', true);
        });


    </script>



</body>
</html>