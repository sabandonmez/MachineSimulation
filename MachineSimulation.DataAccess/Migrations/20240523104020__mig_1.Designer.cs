// <auto-generated />
using System;
using MachineSimulation.DataAccess.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MachineSimulation.DataAccess.Migrations
{
    [DbContext(typeof(MachineSimulationContext))]
    [Migration("20240523104020__mig_1")]
    partial class _mig_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ModbusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Machines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "PlastikEnjeksiyon.jpg",
                            MachineName = "Plastik Enjeksiyon",
                            ModbusId = 4096
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "KitamuraCncTezgahı.jpg",
                            MachineName = "Kitamura Cnc Tezgahı",
                            ModbusId = 4097
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "AbkantPress.jpg",
                            MachineName = "Abkant Press",
                            ModbusId = 4098
                        });
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.MachineLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MachineId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MachineLogs");
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModbusIp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationNameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("OperationNameId");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MachineId = 1,
                            ModbusIp = 2280,
                            OperationNameId = 1
                        },
                        new
                        {
                            Id = 2,
                            MachineId = 1,
                            ModbusIp = 2280,
                            OperationNameId = 2
                        },
                        new
                        {
                            Id = 3,
                            MachineId = 1,
                            ModbusIp = 2273,
                            OperationNameId = 3
                        },
                        new
                        {
                            Id = 4,
                            MachineId = 1,
                            ModbusIp = 2273,
                            OperationNameId = 4
                        },
                        new
                        {
                            Id = 13,
                            MachineId = 1,
                            OperationNameId = 5
                        },
                        new
                        {
                            Id = 14,
                            MachineId = 1,
                            ModbusIp = 4206,
                            OperationNameId = 6
                        },
                        new
                        {
                            Id = 15,
                            MachineId = 1,
                            ModbusIp = 2280,
                            OperationNameId = 7
                        },
                        new
                        {
                            Id = 16,
                            MachineId = 1,
                            ModbusIp = 2280,
                            OperationNameId = 8
                        },
                        new
                        {
                            Id = 5,
                            MachineId = 2,
                            ModbusIp = 2281,
                            OperationNameId = 1
                        },
                        new
                        {
                            Id = 6,
                            MachineId = 2,
                            ModbusIp = 2281,
                            OperationNameId = 2
                        },
                        new
                        {
                            Id = 7,
                            MachineId = 2,
                            ModbusIp = 2274,
                            OperationNameId = 3
                        },
                        new
                        {
                            Id = 8,
                            MachineId = 2,
                            ModbusIp = 2274,
                            OperationNameId = 4
                        },
                        new
                        {
                            Id = 17,
                            MachineId = 2,
                            OperationNameId = 5
                        },
                        new
                        {
                            Id = 18,
                            MachineId = 2,
                            ModbusIp = 4206,
                            OperationNameId = 6
                        },
                        new
                        {
                            Id = 19,
                            MachineId = 2,
                            ModbusIp = 2280,
                            OperationNameId = 7
                        },
                        new
                        {
                            Id = 20,
                            MachineId = 2,
                            ModbusIp = 2280,
                            OperationNameId = 8
                        },
                        new
                        {
                            Id = 9,
                            MachineId = 3,
                            ModbusIp = 2282,
                            OperationNameId = 1
                        },
                        new
                        {
                            Id = 10,
                            MachineId = 3,
                            ModbusIp = 2282,
                            OperationNameId = 2
                        },
                        new
                        {
                            Id = 11,
                            MachineId = 3,
                            ModbusIp = 2275,
                            OperationNameId = 3
                        },
                        new
                        {
                            Id = 12,
                            MachineId = 3,
                            ModbusIp = 2275,
                            OperationNameId = 4
                        },
                        new
                        {
                            Id = 21,
                            MachineId = 3,
                            OperationNameId = 5
                        },
                        new
                        {
                            Id = 22,
                            MachineId = 3,
                            ModbusIp = 4206,
                            OperationNameId = 6
                        },
                        new
                        {
                            Id = 23,
                            MachineId = 3,
                            ModbusIp = 2280,
                            OperationNameId = 7
                        },
                        new
                        {
                            Id = 24,
                            MachineId = 3,
                            ModbusIp = 2280,
                            OperationNameId = 8
                        });
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.OperationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OperationLogs");
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.OperationName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OperationNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hazırlık Başlat"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hazırlık Bitir"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Üretim Başlat"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Üretim Bitir"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Otomatik Üretim Başlat"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Otomatik Üretim Bitir"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Duruş Başlat"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Duruş Bitir"
                        });
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.OperationParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParameterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParameterValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("ParameterId");

                    b.ToTable("OperationParameters");
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("Parameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MachineId = 1,
                            ParameterName = "Hız"
                        },
                        new
                        {
                            Id = 2,
                            MachineId = 2,
                            ParameterName = "Hız"
                        },
                        new
                        {
                            Id = 3,
                            MachineId = 1,
                            ParameterName = "Sıcaklık"
                        },
                        new
                        {
                            Id = 4,
                            MachineId = 2,
                            ParameterName = "Sıcaklık"
                        },
                        new
                        {
                            Id = 5,
                            MachineId = 3,
                            ParameterName = "Cnc Ilerleme Hizi"
                        },
                        new
                        {
                            Id = 6,
                            MachineId = 3,
                            ParameterName = "Ariza Alarm Sayisi"
                        });
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Stoppage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReasonStoppageName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReasonStoppageValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("Stoppages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MachineId = 1,
                            ReasonStoppageName = "Bakım Arıza",
                            ReasonStoppageValue = 45
                        },
                        new
                        {
                            Id = 2,
                            MachineId = 1,
                            ReasonStoppageName = "Planlı Duruş",
                            ReasonStoppageValue = 60
                        },
                        new
                        {
                            Id = 3,
                            MachineId = 1,
                            ReasonStoppageName = "Deneme Duruşu",
                            ReasonStoppageValue = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5a7d51b1-3fcf-4891-85e2-4e11ef55412d",
                            ConcurrencyStamp = "20e27af1-1861-4c24-8002-e0d5917c120f",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "33911f39-fa54-4ebf-b0ac-f2bd173e135e",
                            ConcurrencyStamp = "d616e946-9b32-454d-8426-e11647c446c3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Operation", b =>
                {
                    b.HasOne("MachineSimulation.Entities.Concrete.Machine", "Machine")
                        .WithMany("Operations")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineSimulation.Entities.Concrete.OperationName", "OperationName")
                        .WithMany("Operations")
                        .HasForeignKey("OperationNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("OperationName");
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.OperationParameter", b =>
                {
                    b.HasOne("MachineSimulation.Entities.Concrete.Operation", "Operation")
                        .WithMany("OperationParameters")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineSimulation.Entities.Concrete.Parameter", "Parameter")
                        .WithMany("OperationParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Parameter", b =>
                {
                    b.HasOne("MachineSimulation.Entities.Concrete.Machine", "Machine")
                        .WithMany("Parameters")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Stoppage", b =>
                {
                    b.HasOne("MachineSimulation.Entities.Concrete.Machine", "Machine")
                        .WithMany("Stopages")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Machine", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Parameters");

                    b.Navigation("Stopages");
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Operation", b =>
                {
                    b.Navigation("OperationParameters");
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.OperationName", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("MachineSimulation.Entities.Concrete.Parameter", b =>
                {
                    b.Navigation("OperationParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
